{"version":3,"file":"static/js/985.3b05c888.chunk.js","mappings":"iPAuFA,EAlE0D,SAACA,GAEvD,IAAMC,GAAWC,EAAAA,EAAAA,KACjBC,GAKIC,EAAAA,EAAAA,IAAe,SAACC,GAAK,OAAKA,EAAMC,eAAe,IAJ/CC,EAAyBJ,EAAzBI,0BACAC,EAAWL,EAAXK,YACAC,EAAUN,EAAVM,WACAC,EAAcP,EAAdO,gBAGJC,EAAAA,EAAAA,YAAU,WACNV,GAASW,EAAAA,EAAAA,GAAkB,CAAEC,UAAWb,EAAMc,KAAMC,WAAW,GAADC,OAAKR,KACvE,GAAG,CAACA,EAAaP,IAOjB,OACIgB,EAAAA,EAAAA,MAAA,WAASC,UAAU,kBAAiBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SAEQ,SAA9BZ,GACGa,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACPC,MAAM,UACNC,YAAa,CACTC,OAAQ,YAGhBd,EAAee,KAAI,SAACC,EAAMC,GAAC,OACvBP,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,GAAE,IAAAb,OAAMU,EAAKb,UAAS,KAAAG,OAAIU,EAAKI,IAAKX,UACtCC,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CACNC,MACMN,EAAKO,MAC8C,sCAAAjB,OACXU,EAAKO,OAFnC,sCAAAjB,OAC8BU,EAAKQ,QAGnDC,MAAOT,EAAKS,SAP4BR,EASzC,OAIvBP,EAAAA,EAAAA,KAACgB,IAAa,CACVC,aA/BY,SAACC,GACrBrC,GAASW,EAAAA,EAAAA,GAAkB,CAAEC,UAAWb,EAAMc,KAAMC,WAAW,GAADC,OAAKsB,EAAMC,SAAW,MACpFC,OAAOC,SAAS,EAAG,EACvB,EA6BYC,mBAAoB,EACpBC,qBAAsB,EACtBC,UAAWnC,EACXoC,WAAW,MACXC,UAAU,IACVC,cAAc,IACdC,mBAAmB,aACnBC,kBAAkB,YAClBC,sBAAsB,YACtBC,cAAc,YACdC,kBAAkB,YAClBC,eAAe,YACfC,mBAAmB,YACnBC,gBAAgB,qBAChBC,sBAAuB,kBAAM,IAAI,MAIjD,C,8EC7DA,EAd4C,SAACxD,GAEzC,OACIiB,EAAAA,EAAAA,MAAA,OAAKC,UAAYlB,EAAMyD,MAAK,gBAAAzC,OAAmBhB,EAAMyD,OAAU,eAAgBtC,SAAA,EAC3EC,EAAAA,EAAAA,KAACsC,EAAAA,EAAc,CACXD,MAAM,eACNE,OAAQ3D,EAAMgC,MACd4B,IAAK5D,EAAMmC,SAEff,EAAAA,EAAAA,KAAA,MAAIF,UAAU,qBAAoBC,SAAEnB,EAAMmC,UAGtD,C,yECUA,UArBwC,SAACnC,GACrC,OACIiB,EAAAA,EAAAA,MAAA4C,EAAAA,SAAA,CAAA1C,SAAA,EACIF,EAAAA,EAAAA,MAAC6C,EAAAA,EAAM,CAAA3C,SAAA,EACHC,EAAAA,EAAAA,KAAA,QAAM2C,KAAK,cAAcC,QAAQ,eACjC5C,EAAAA,EAAAA,KAAA,SAAAD,SAAO,kBAEXF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,WAASF,UAAU,aAAYC,UAC3BC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAY,CAAA9C,UACTC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,mBAAkBC,SAAC,cAGzCC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAY,CAAA9C,UACTC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAgB,CAACC,aAAc,GAAIrD,KAAM,cAK9D,C","sources":["components/catalog-component/CatalogComponent.tsx","components/movie-card/MovieCard.tsx","components/pages/tvs-page/TvsPage.tsx"],"sourcesContent":["import { MediaType } from '../../utils/types/types';\r\n\r\nimport { useEffect } from 'react';\r\nimport { GridLoader } from 'react-spinners';\r\n\r\nimport { useAppDispatch } from '../../utils/hooks/useAppDispatch';\r\nimport { useAppSelector } from '../../utils/hooks/useAppSelector';\r\nimport { Link } from 'react-router-dom';\r\nimport { getPaginateResult } from '../../slices/pagitaneSlice';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\nimport MovieCard from '../movie-card/MovieCard';\r\n\r\n\r\nimport './catalogComponent.scss';\r\n\r\ninterface CatalogComponentProps {\r\n    itemsPerPage: number\r\n    type: MediaType\r\n}\r\n\r\nconst CatalogComponent: React.FC<CatalogComponentProps> = (props: CatalogComponentProps) => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const {\r\n        paginateResultFetchStatus,\r\n        currentPage,\r\n        totalPages,\r\n        paginateResult\r\n    } = useAppSelector((state) => state.paginateReducer);\r\n\r\n    useEffect(() => {\r\n        dispatch(getPaginateResult({ mediaType: props.type, pageNumber: `${currentPage}` }));\r\n    }, [currentPage, dispatch]);\r\n\r\n    const handlePageClick = (event: any) => {\r\n        dispatch(getPaginateResult({ mediaType: props.type, pageNumber: `${event.selected + 1}` }));\r\n        window.scrollTo(0, 0);\r\n    };\r\n\r\n    return (\r\n        <section className='section catalog'>\r\n            <div className=\"catalog__items\">\r\n                {\r\n                    (paginateResultFetchStatus !== 'idle') ?\r\n                        <GridLoader\r\n                            color='#582904'\r\n                            cssOverride={{\r\n                                margin: '0 auto'\r\n                            }}\r\n                        /> :\r\n                        paginateResult.map((item, i) => (\r\n                            <Link to={`/${item.mediaType}/${item.id}`} key={i}>\r\n                                <MovieCard\r\n                                    image={\r\n                                        (!item.cover) ?\r\n                                            `https://image.tmdb.org/t/p/original${item.poster}` :\r\n                                            `https://image.tmdb.org/t/p/original${item.cover}`\r\n                                    }\r\n                                    title={item.title}\r\n                                />\r\n                            </Link>\r\n                        ))\r\n                }\r\n            </div>\r\n            <ReactPaginate\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={1}\r\n                marginPagesDisplayed={1}\r\n                pageCount={totalPages}\r\n                breakLabel=\"...\"\r\n                nextLabel=\">\"\r\n                previousLabel=\"<\"\r\n                containerClassName=\"pagination\"\r\n                pageLinkClassName=\"page-link\"\r\n                previousLinkClassName=\"page-link\"\r\n                nextClassName=\"page-item\"\r\n                nextLinkClassName=\"page-link\"\r\n                breakClassName=\"page-item\"\r\n                breakLinkClassName=\"page-link\"\r\n                activeClassName=\"active__pagination\"\r\n                renderOnZeroPageCount={() => null}\r\n            />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default CatalogComponent;","import ImageContainer from '../image-container/ImageContainer';\r\n\r\nimport './movieCard.scss';\r\n\r\ninterface MovieCardProps {\r\n    image: string,\r\n    title: string,\r\n    clazz?: string,\r\n}\r\n\r\nconst MovieCard: React.FC<MovieCardProps> = (props: MovieCardProps) => {\r\n\r\n    return (\r\n        <div className={(props.clazz ? `movie__card  ${props.clazz}` : 'movie__card ')}>\r\n            <ImageContainer\r\n                clazz='movie__cover'\r\n                imgSrc={props.image}\r\n                alt={props.title}\r\n            />\r\n            <h3 className=\"movie__card-title \">{props.title}</h3>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default MovieCard;\r\n\r\n","import { MediaType } from '../../../utils/types/types';\r\n\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport AppContainer from '../../container/AppContainer';\r\nimport CatalogComponent from '../../catalog-component/CatalogComponent';\r\n\r\ninterface TvsPageProps {\r\n    type: MediaType | 'tvs'\r\n}\r\n\r\nconst TvsPage: React.FC<TvsPageProps> = (props: TvsPageProps) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Tv's list\" />\r\n                <title>Tv's list</title>\r\n            </Helmet>\r\n            <main>\r\n                <section className='page__hero'>\r\n                    <AppContainer>\r\n                        <h2 className='page__hero-title'>Tv's</h2>\r\n                    </AppContainer>\r\n                </section>\r\n                <AppContainer>\r\n                    <CatalogComponent itemsPerPage={24} type={'tv'} />\r\n                </AppContainer>\r\n            </main>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TvsPage;"],"names":["props","dispatch","useAppDispatch","_useAppSelector","useAppSelector","state","paginateReducer","paginateResultFetchStatus","currentPage","totalPages","paginateResult","useEffect","getPaginateResult","mediaType","type","pageNumber","concat","_jsxs","className","children","_jsx","GridLoader","color","cssOverride","margin","map","item","i","Link","to","id","MovieCard","image","cover","poster","title","ReactPaginate","onPageChange","event","selected","window","scrollTo","pageRangeDisplayed","marginPagesDisplayed","pageCount","breakLabel","nextLabel","previousLabel","containerClassName","pageLinkClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","renderOnZeroPageCount","clazz","ImageContainer","imgSrc","alt","_Fragment","Helmet","name","content","AppContainer","CatalogComponent","itemsPerPage"],"sourceRoot":""}