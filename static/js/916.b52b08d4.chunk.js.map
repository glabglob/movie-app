{"version":3,"file":"static/js/916.b52b08d4.chunk.js","mappings":"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","sources":["components/cast-card/CastCard.tsx","components/movie-card/MovieCard.tsx","components/pages/movie-page/MoviePage.tsx","components/slider/SliderComponent.tsx","components/trailer-card/TrailerCard.tsx","components/trailer-modal/TrailerModal.tsx"],"sourcesContent":["import './castCard.scss';\r\n\r\ninterface CastCardProps {\r\n    clazz?: string\r\n    image: string,\r\n    actorName: string,\r\n    charName: string,\r\n    alt?: string\r\n}\r\n\r\nconst CastCard: React.FC<CastCardProps> = (props: CastCardProps) => {\r\n    return (\r\n        <div className={(props.clazz ? `cast__card ${props.clazz}` : 'cast__card')} >\r\n            <figure className=\"cast__card-img_container\">\r\n                <img className='cast__card-img'\r\n                    src={props.image}\r\n                    alt={props.alt}\r\n                />\r\n                <figcaption className=\"cast__card-info\">\r\n                    <p className=\"cast__card-actorName\">{props.actorName}</p>\r\n                    <p className='cast__card-charName'>{props.charName}</p>\r\n                </figcaption>\r\n            </figure>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CastCard;","import ImageContainer from '../image-container/ImageContainer';\r\n\r\nimport './movieCard.scss';\r\n\r\ninterface MovieCardProps {\r\n    image: string,\r\n    title: string,\r\n    clazz?: string,\r\n}\r\n\r\nconst MovieCard: React.FC<MovieCardProps> = (props: MovieCardProps) => {\r\n\r\n    return (\r\n        <div className={(props.clazz ? `movie__card  ${props.clazz}` : 'movie__card ')}>\r\n            <ImageContainer\r\n                clazz='movie__cover'\r\n                imgSrc={props.image}\r\n                alt={props.title}\r\n            />\r\n            <h3 className=\"movie__card-title \">{props.title}</h3>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default MovieCard;\r\n\r\n","import { MediaType } from \"../../../utils/types/types\";\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { BeatLoader, GridLoader } from 'react-spinners';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport AppContainer from \"../../container/AppContainer\";\r\nimport SliderComponent from \"../../slider/SliderComponent\";\r\nimport ImageContainer from \"../../image-container/ImageContainer\";\r\nimport CastCard from \"../../cast-card/CastCard\";\r\nimport MovieCard from \"../../movie-card/MovieCard\";\r\nimport TrailerCard from \"../../trailer-card/TrailerCard\";\r\nimport TrailerModal from \"../../trailer-modal/TrailerModal\";\r\n\r\nimport { useAppDispatch } from '../../../utils/hooks/useAppDispatch';\r\nimport { useAppSelector } from '../../../utils/hooks/useAppSelector';\r\nimport { getMovieDetail, getCast, getTrailers, getRecommendations } from \"../../../slices/detailsPageSlice\";\r\n\r\nimport './moviePage.scss';\r\n\r\ninterface MoviePageProps {\r\n    type: MediaType\r\n}\r\n\r\nconst MoviePage: React.FC<MoviePageProps> = (props: MoviePageProps) => {\r\n\r\n    const [trailerSrc, setTrailerSrc] = useState('');\r\n\r\n    const { id } = useParams<any>();\r\n\r\n    const dispatch = useAppDispatch();\r\n    const {\r\n        castFetchStatus,\r\n        trailersFetchStatus,\r\n        recommendationsFetchStatus,\r\n        movie,\r\n        cast,\r\n        trailers,\r\n        recommendations\r\n\r\n    } = useAppSelector(state => state.detailPageReducer);\r\n\r\n    useEffect(() => {\r\n        dispatch(getMovieDetail({ mediaType: props.type, movieId: `${id}` }));\r\n        dispatch(getCast({ mediaType: props.type, movieId: `${id}` }));\r\n        dispatch(getTrailers({ mediaType: props.type, movieId: `${id}` }));\r\n        dispatch(getRecommendations({ mediaType: props.type, movieId: `${id}` }));\r\n        // eslint-disable-next-line\r\n    }, [id]);\r\n\r\n    const playTrailer = async (key: string) => {\r\n        setTrailerSrc(`https://www.youtube.com/embed/${key}?autoplay=1`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content={`${movie.title} page`} />\r\n                <title>{movie.title}</title>\r\n            </Helmet>\r\n            <main>\r\n                <TrailerModal\r\n                    onHide={() => setTrailerSrc('')}\r\n                    videoId={`${trailerSrc}`}\r\n                ></TrailerModal>\r\n                <section className=\"movie__hero\">\r\n                    <ImageContainer\r\n                        imgSrc={\r\n                            (!movie.cover) ?\r\n                                `https://image.tmdb.org/t/p/original${movie.poster}` :\r\n                                `https://image.tmdb.org/t/p/original${movie.cover}`\r\n                        }\r\n                        alt={`${movie.title}`}\r\n                        clazz='movie__hero-img'\r\n                    />\r\n                </section>\r\n                <AppContainer>\r\n                    <section className=\"section movie__poster\">\r\n                        <ImageContainer\r\n                            imgSrc={\r\n                                (!movie.poster) ?\r\n                                    `https://image.tmdb.org/t/p/original${movie.cover}` :\r\n                                    `https://image.tmdb.org/t/p/original${movie.poster}`\r\n                            }\r\n                            alt={`${movie.title}`}\r\n                            clazz='poster'\r\n                        />\r\n                        <article className=\"movie__poster-info\">\r\n                            <h3 className=\"movie__poster-title\">{movie.title}</h3>\r\n                            <ul className=\"movie__poster-genres\">\r\n                                {\r\n                                    (!movie.genres) ? '' : (movie.genres.map((genre, i) => (\r\n                                        <li key={i} className=\"movie__poster-genres_items\">{genre.name}</li>\r\n                                    )))\r\n                                }\r\n                            </ul>\r\n                            <p className=\"movie__poster-description\">{movie.description}</p>\r\n                        </article>\r\n                    </section>\r\n                    {\r\n                        (cast.length === 0) ? '' :\r\n                            <section className=\"section movie__casts\">\r\n                                <h2>top casts</h2>\r\n                                {\r\n                                    (castFetchStatus !== 'idle') ?\r\n                                        <BeatLoader\r\n                                            color='#582904'\r\n                                            cssOverride={{\r\n                                                margin: '0 auto'\r\n                                            }}\r\n                                        /> :\r\n                                        <SliderComponent\r\n                                            clazz={\"slick__scroll\"}\r\n                                            autoplay={true}\r\n                                            infinite={(cast.length <= 5) ? false : true}\r\n                                        >\r\n                                            {\r\n                                                cast.map((cast, i) => (\r\n                                                    <Link to={`/person/${cast.id}`} key={i}>\r\n                                                        <CastCard\r\n                                                            image={`https://image.tmdb.org/t/p/original${cast.cover}`}\r\n                                                            actorName={cast.name}\r\n                                                            charName={cast.charName}\r\n                                                            alt={`${cast.name}`}\r\n                                                        />\r\n                                                    </Link>\r\n                                                ))\r\n                                            }\r\n                                        </SliderComponent>\r\n                                }\r\n                            </section>\r\n                    }\r\n                    {\r\n                        (trailers.length === 0) ? '' :\r\n                            <section className=\"section movie__trailers\">\r\n                                <h2>trailers</h2>\r\n                                {\r\n                                    (trailersFetchStatus !== 'idle') ?\r\n                                        <BeatLoader\r\n                                            color='#582904'\r\n                                            cssOverride={{\r\n                                                margin: '0 auto'\r\n                                            }}\r\n                                        /> :\r\n                                        <SliderComponent\r\n                                            clazz={\"slick__scroll\"}\r\n                                            autoplay={false}\r\n                                            infinite={(trailers.length <= 5) ? false : true}\r\n                                        >\r\n                                            {\r\n                                                trailers.map((trailers, i) => (\r\n                                                    <TrailerCard\r\n                                                        image={`https://img.youtube.com/vi/${trailers.key}/mqdefault.jpg`}\r\n                                                        title={''}\r\n                                                        key={i}\r\n                                                        onClick={() => playTrailer(trailers.key)}\r\n                                                    />\r\n                                                ))\r\n                                            }\r\n                                        </SliderComponent>\r\n                                }\r\n                            </section>\r\n                    }\r\n                    {\r\n                        (recommendations.length === 0) ? '' :\r\n                            <section className=\"section movie__recommendations\">\r\n                                <h2>recommendations</h2>\r\n                                {\r\n                                    (recommendationsFetchStatus !== 'idle') ?\r\n                                        <BeatLoader\r\n                                            color='#582904'\r\n                                            cssOverride={{\r\n                                                margin: '0 auto'\r\n                                            }}\r\n                                        /> :\r\n                                        <SliderComponent\r\n                                            autoplay={false}\r\n                                            swipe={true}\r\n                                            clazz={'slick__scroll'}\r\n                                            infinite={(recommendations.length <= 5) ? false : true}\r\n                                        >\r\n                                            {\r\n                                                recommendations.map((rec, i) => (\r\n                                                    <Link to={`/${rec.mediaType}/${rec.id}`} key={i} >\r\n                                                        <MovieCard\r\n                                                            image={\r\n                                                                (!rec.poster) ?\r\n                                                                    `https://image.tmdb.org/t/p/original${rec.cover}` :\r\n                                                                    `https://image.tmdb.org/t/p/original${rec.poster}`\r\n                                                            }\r\n                                                            title={rec.title}\r\n                                                        />\r\n                                                    </Link>\r\n                                                ))\r\n                                            }\r\n                                        </SliderComponent>\r\n                                }\r\n                            </section>\r\n                    }\r\n                </AppContainer>\r\n            </main >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MoviePage;","import Slick, { Settings } from 'react-slick';\r\n\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport './sliderComponent.scss';\r\n\r\ninterface SliderComponentProps extends Settings {\r\n    isMovieCard?: boolean\r\n    clazz?: string\r\n}\r\n\r\nconst SliderComponent: React.FC<SliderComponentProps> = (props: SliderComponentProps) => {\r\n\r\n    let settings: Settings = {\r\n        ...props,\r\n    };\r\n\r\n    if (props.clazz === 'slick__cards') {\r\n        settings = {\r\n            slidesToShow: 5,\r\n            slidesToScroll: 1,\r\n            swipe: false,\r\n            ...settings,\r\n            responsive: [\r\n                {\r\n                    breakpoint: 1025,\r\n                    settings: {\r\n                        slidesToShow: 3,\r\n                        slidesToScroll: 1,\r\n                        swipe: true,\r\n                    },\r\n                },\r\n                {\r\n                    breakpoint: 480,\r\n                    settings: {\r\n                        slidesToShow: 2,\r\n                        slidesToScroll: 1,\r\n                        swipe: true,\r\n                    },\r\n                },\r\n                {\r\n                    breakpoint: 391,\r\n                    settings: {\r\n                        slidesToShow: 1,\r\n                        slidesToScroll: 1,\r\n                        swipe: true,\r\n                    },\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    if (props.clazz === 'slick__scroll') {\r\n        settings = {\r\n            slidesToShow: 5,\r\n            slidesToScroll: 1,\r\n            swipeToSlide: true,\r\n            infinite: true,\r\n            autoplaySpeed: 2000,\r\n            ...settings,\r\n            responsive: [\r\n                {\r\n                    breakpoint: 1025,\r\n                    settings: {\r\n                        slidesToShow: 3,\r\n                    },\r\n                },\r\n                {\r\n                    breakpoint: 992,\r\n                    settings: {\r\n                        slidesToShow: 2,\r\n                    },\r\n                },\r\n                {\r\n                    breakpoint: 391,\r\n                    settings: {\r\n                        slidesToShow: 1,\r\n                        slidesToScroll: 1,\r\n                    },\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Slick\r\n            className={props.clazz}\r\n            autoplaySpeed={5000}\r\n            {...settings}\r\n        >\r\n            {props.children}\r\n        </Slick>\r\n    );\r\n}\r\n\r\nexport default SliderComponent;","import ImageContainer from \"../image-container/ImageContainer\"\r\n\r\n\r\nimport './trailerCard.scss';\r\n\r\ninterface TrailerCardProps {\r\n    onClick?: Function\r\n    image: string,\r\n    title: string,\r\n    clazz?: string\r\n}\r\n\r\nconst TrailerCard: React.FC<TrailerCardProps> = (props: TrailerCardProps) => {\r\n    return (\r\n        <div className={(props.clazz ? `trailer__card ${props.clazz}` : 'trailer__card')} onClick={() => (props.onClick ? props.onClick() : '')}>\r\n            <ImageContainer\r\n                clazz='movie__cover trailer__cover'\r\n                imgSrc={props.image}\r\n                alt={props.title}\r\n            />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default TrailerCard;","import { useEffect, useState } from 'react';\r\n\r\nimport './trailerModal.scss';\r\n\r\ninterface TrailerModalProps {\r\n    videoId: string,\r\n    onHide: () => void\r\n}\r\n\r\nconst TrailerModal: React.FC<TrailerModalProps> = (props: TrailerModalProps) => {\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const hide = () => {\r\n        setShow(false);\r\n        props.onHide();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.videoId) setShow(true);\r\n    }, [props.videoId]);\r\n\r\n    return (\r\n        <div className={`modal ${show ? \"show\" : \"\"}`} onClick={() => hide()}>\r\n            <div className=\"modal__overlay\"></div>\r\n            <div className=\"modal__content\">\r\n                <div className=\"modal__header\">\r\n                    <button className=\"modal__close-button\" onClick={() => hide()}>&#10005;</button>\r\n                </div>\r\n                {show ? <iframe src={props.videoId} title='trailer'/> : null}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TrailerModal;"],"names":["props","_jsx","className","clazz","concat","children","_jsxs","src","image","alt","actorName","charName","ImageContainer","imgSrc","title","_useState","useState","_useState2","_slicedToArray","trailerSrc","setTrailerSrc","id","useParams","dispatch","useAppDispatch","_useAppSelector","useAppSelector","state","detailPageReducer","castFetchStatus","trailersFetchStatus","recommendationsFetchStatus","movie","cast","trailers","recommendations","useEffect","getMovieDetail","mediaType","type","movieId","getCast","getTrailers","getRecommendations","playTrailer","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","key","wrap","_context","prev","next","stop","_x","apply","arguments","_Fragment","Helmet","name","content","TrailerModal","onHide","videoId","cover","poster","AppContainer","genres","map","genre","i","description","length","BeatLoader","color","cssOverride","margin","SliderComponent","autoplay","infinite","Link","to","CastCard","TrailerCard","onClick","swipe","rec","MovieCard","settings","_objectSpread","slidesToShow","slidesToScroll","responsive","breakpoint","swipeToSlide","autoplaySpeed","Slick","show","setShow","hide"],"sourceRoot":""}